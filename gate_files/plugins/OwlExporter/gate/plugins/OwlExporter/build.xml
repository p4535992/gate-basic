<!--======================================================================

   Build file for OwlExporter
   http://www.semanticsoftware.info/owlexporter

   This file will allow you to build your plugin with Ant. 

=======================================================================-->
<project name="OwlExporter" basedir="." default="all"
         xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- Prevent Ant from warning about includeantruntime not being set -->
  <property name="build.sysclasspath" value="ignore" />

  <property file="build.properties" />

  <!--=======================================================
    Property settings.  You should not need to edit these
    directly, if you need to set a different value for any
    property you should edit build.properties and override
    them there.
  ========================================================-->

  <!-- location of the top-level GATE installation directory -->
  <property name="gate.home.home" location="../.." />
  <property name="protege.home.home" location="../.." />

  <!-- location of GATE lib directory - should be inferred from gate.home.home -->
  <property name="gate.lib" location="${gate.org.p4535992.mvc.home}/lib" />

  <!-- location of Protege lib directory - should be inferred from gate.home.home -->
  <property name="protege.lib" location="${protege.org.p4535992.mvc.home}/plugins" />

  <!-- location of gate.jar - should be inferred from gate.home.home -->
  <property name="gate.jar" location="${gate.org.p4535992.mvc.home}/bin/gate.jar" />

  <!-- location of protege.jar - should be inferred from protege.home.home -->
  <property name="protege.jar" location="${protege.org.p4535992.mvc.home}/protege.jar" />

  <!-- Source directory - contains the Java source files for this plugin -->
  <property name="src.dir" location="src" />

  <!-- directory to contain the compiled classes -->
  <property name="classes.dir" location="classes" />

  <!-- documentation directory -->
  <property name="doc.dir" location="doc" />

  <!-- JavaDoc documentation directory -->
  <property name="javadoc.dir" location="${doc.dir}/javadoc" />

  <!-- lib directory - put any additional JAR files your plugin requires into
       this directory.  You will also need to add them as <JAR> entries in
       creole.xml -->
  <property name="lib.dir" location="lib" />

  <!-- location for the generated JAR file -->
  <property name="jar.location" location="${plugin.name}.jar" />



  <!-- Classpath to compile - includes gate.jar, GATE/lib/*.jar and any local
       library JAR files. -->
  <path id="compile.classpath">
    <pathelement location="${gate.jar}" />
    <fileset dir="${gate.lib}">
      <include name="**/*.jar" />
      <include name="**/*.zip" />
    </fileset>
    <fileset dir="${lib.dir}" includes="**/*.jar" />
  </path>

 
  <!--====================== Targets ============================-->
  
  <!-- insert build directory structure -->
  <target name="prepare">
    <mkdir dir="${classes.dir}" />
  </target>

  <!-- compile the source -->
  <target name="compile" depends="prepare">
    <copy file="${protege.org.p4535992.mvc.home}/protege.jar" todir="${lib.dir}"/>
    <copy file="${protege.lib}/edu.stanford.smi.protegex.owl/protege-owl.jar" todir="${lib.dir}/"/>    
    <copy file="${protege.lib}/edu.stanford.smi.protegex.owl/orphanNodesAlg.jar" todir="${lib.dir}/"/>
    <javac classpathref="compile.classpath"
           srcdir="${src.dir}"
           destdir="${classes.dir}"
           debug="true"
           debuglevel="lines,source"
           source="1.5" >
      <compilerarg value="-Xlint"/>
      </javac>
  </target>

  <!-- copy resources (anything non-.java) from src to classes -->
  <target name="copy.resources" depends="prepare">
    <copy todir="${classes.dir}">
      <fileset dir="${src.dir}" excludes="**/*.java" />
    </copy>
  </target>

  <!-- insert the JAR file -->
  <target name="jar" depends="compile, copy.resources" >
    <jar destfile="${jar.location}"
         update="false"
         basedir="${classes.dir}" />
  </target>

  <!-- remove the generated .class files -->
  <target name="clean.classes" >
    <delete dir="${classes.dir}" />
  </target>

  <!-- Clean up - remove .class and .jar files -->
  <target name="clean" depends="clean.classes" >
    <delete file="${jar.location}" />
    <delete file="${lib.dir}/protege.jar"/>
    <delete file="${lib.dir}/protege-owl.jar"/>
    <delete file="${lib.dir}/orphanNodesAlg.jar"/>    
  </target>

  <!-- Build JavaDoc documentation -->
  <target name="doc.prepare">
    <mkdir dir="${javadoc.dir}" />
  </target>

  <target name="javadoc" depends="doc.prepare">
    <javadoc destdir="${javadoc.dir}" packagenames="*"
             classpathref="compile.classpath"
             encoding="UTF-8"
             windowtitle="${plugin.name} JavaDoc"
             source="1.5">
      <sourcepath>
        <pathelement location="${src.dir}" />
      </sourcepath>
    </javadoc>
  </target>

  <!-- Build everything - the code and JavaDoc -->
  <target name="all" depends="jar, javadoc" />

</project>
