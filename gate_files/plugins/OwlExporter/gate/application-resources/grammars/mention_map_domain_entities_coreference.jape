/*
OwlExporter --  http://www.semanticsoftware.info/owlexporter

This file is part of the OwlExporter architecture.

Copyright (C) 2009, 2010 Semantic Software Lab, http://www.semanticsoftware.info
        Ren√© Witte
        Ninus Khamis

The OwlExporter  architecture is free software: you can
redistribute and/or modify it under the terms of the GNU Affero General
Public License as published by the Free Software Foundation, either
version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
Phase: mention_map_domain_entities_coreference
Input: Document Sentence Lookup
Options: control = all  debug = true

Rule: mention_map_domain_entities_coreference
(	
	{Lookup}
)
:ann
-->
{
	try	{	
		AnnotationSet as = (gate.AnnotationSet)bindings.get("ann");
		AnnotationSet chain = annotations.get("Lookup Chain");
		Annotation ann = (gate.Annotation)as.iterator().next();
		FeatureMap features = ann.getFeatures();

		if(chain==null||chain.isEmpty())
		{
		     System.out.println("chain empty");
		}
		Integer chainId = null;

 	        Iterator chainIt = chain.iterator();
	        while(chainIt.hasNext())
		{
		     Annotation chainAnn = (Annotation)chainIt.next();	
		     if(((ArrayList)(chainAnn.getFeatures().get("IDs"))).contains(ann.getId()))
		     chainId = chainAnn.getId();		    
		}	

		if(ann.getFeatures().get("majorType").toString().compareToIgnoreCase("person_first") == 0) {
			features.put("className", "Person");
			features.put("hasGender", ann.getFeatures().get("minorType").toString());
		}
	
		if(ann.getFeatures().get("majorType").toString().compareToIgnoreCase("location") == 0) {
			String s = ann.getFeatures().get("minorType").toString();
			features.put("className", Character.toUpperCase(s.charAt(0)) + s.substring(1));
		}
	
		if(ann.getFeatures().get("majorType").toString().compareToIgnoreCase("person_first") == 0 ||
			ann.getFeatures().get("majorType").toString().compareToIgnoreCase("location") == 0) {
			String in = doc.getContent().getContent(
				ann.getStartNode().getOffset(), ann.getEndNode().getOffset()).toString();
			features.put("instanceName", in);	
			features.put("representationId", ann.getId());	
        		features.put("corefChain", chainId);		     				
			features.put("kind", "Class");	
			outputAS.add(as.firstNode(), as.lastNode(), "OwlExportClassDomain", features);	
			
		}
		
	}
	catch(Exception e){
		e.printStackTrace();
	}	
}
